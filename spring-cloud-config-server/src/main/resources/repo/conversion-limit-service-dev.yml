spring:
  application:
    name: CURRENCY-CONVERSION-SERVICE
  datasource:
    url: jdbc:mysql://localhost:3307/auth
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
  cloud:
    loadbalancer:
      instances:
        currency-exchange-service:
          # 0: http://localhost:8000
          1: http://localhost:8000         
 
server:
  port: 8100
  
resilience4j:
  circuitbreaker:
    instances:
      currencyExchangeService:
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 6           # same as requestVolumeThreshold
        minimumNumberOfCalls: 6        # min calls before evaluating failure rate
        failureRateThreshold: 50       # % of failures to open CB
        waitDurationInOpenState: 10s   # same as sleepWindowInMilliseconds
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        enable: false     

  ratelimiter:
    instances:
      currencyExchangeService:
        limitForPeriod: 10             # Number of calls allowed per refresh period
        limitRefreshPeriod: 10s        # How often the limit is refreshed
        timeoutDuration: 2s            # How long to wait for permission
        registerHealthIndicator: true  # Show in /actuator/health
        
  thread-pool-bulkhead:
    instances:
      currencyExchangeService:
        coreThreadPoolSize: 5
        maxThreadPoolSize: 10
        queueCapacity: 20
        
  timelimiter:
    instances:
      currencyConversionService:
        timeoutDuration: 2s           # Max time to wait for the call
        cancelRunningFuture: true     # Cancels the running task if it times out
        
        
  retry:
    instances:
      currencyConversionService:
        maxAttempts: 3              # Total attempts = initial + 2 retries
        waitDuration: 2s            # Wait time between retries
        enableExponentialBackoff: true   # Optional: exponential increase in wait time
        exponentialBackoffMultiplier: 2  # Wait doubles each time: 2s → 4s → 8s
        retryExceptions:
          - java.io.IOException
          - org.springframework.web.client.HttpServerErrorException
        ignoreExceptions:
          - java.lang.NullPointerException

logging:
  file:
    name: "D:/Gaurav/Study/Programs/Backend Programs/microservice/microservice2/microservice_logs/conversion-limit-service/application.log"
  pattern:
    file: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"